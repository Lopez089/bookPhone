(this.webpackJsonpthe_phonebook = this.webpackJsonpthe_phonebook || []).push([[0], { 10: function (e, n, t) {}, 24: function (e, n, t) {}, 44: function (e, n, t) { 'use strict'; t.r(n); const c = t(2); const a = t.n(c); const r = t(19); const u = t.n(r); const s = (t(24), t(9)); const o = t(8); const i = t(3); const l = (t(10), t(5)); const d = t.n(l); const h = '/api/persons/'; const j = function () { return d.a.get(h) }; const b = t(0); const f = function (e) { const n = e.handleOnChage; return Object(b.jsxs)('div', { children: ['Filter shown with ', Object(b.jsx)('input', { onChange: n })] }) }; const m = function (e) { const n = e.handleOnChageName; const t = e.handleOnChageNumber; const c = e.handleSubmit; return Object(b.jsxs)('form', { children: [Object(b.jsxs)('div', { children: ['name: ', Object(b.jsx)('input', { onChange: n })] }), Object(b.jsxs)('div', { children: ['phone number : ', Object(b.jsx)('input', { onChange: t })] }), Object(b.jsx)('div', { children: Object(b.jsx)('button', { type: 'submit', onClick: function (e) { return c(e) }, children: 'add' }) })] }) }; const O = function (e) { const n = e.person; const t = e.handleDelete; return Object(b.jsxs)(b.Fragment, { children: [Object(b.jsx)('p', { children: ''.concat(n.name, ' | ').concat(n.number) }), Object(b.jsx)('button', { onClick: function () { return t(n.name, n.id) }, children: 'delete' })] }) }; const p = function (e) { const n = e.message; if (n === null) return null; const t = n.status ? 'error' : 'message'; return Object(b.jsx)('p', { className: t, children: n.message }) }; const g = function () { const e = Object(c.useState)([]); const n = Object(i.a)(e, 2); const t = n[0]; const a = n[1]; const r = Object(c.useState)(''); const u = Object(i.a)(r, 2); const l = u[0]; const g = u[1]; const x = Object(c.useState)(''); const v = Object(i.a)(x, 2); const w = v[0]; const C = v[1]; const k = Object(c.useState)(''); const S = Object(i.a)(k, 2); const y = S[0]; const N = S[1]; const T = Object(c.useState)(null); const D = Object(i.a)(T, 2); const E = D[0]; const M = D[1]; Object(c.useEffect)(function () { j().then(function (e) { return a(e.data) }) }, []); const U = function (e, n) { const c = window.confirm('Deseas eliminar de la lista a '.concat(e)); const r = t.filter(function (e) { return e.id !== n }); a(r), c && (function (e) { return d.a.delete(''.concat(h).concat(e)) }(n)).then(function (n) { n.status === 204 && M({ message: 'User '.concat(e, ' was successfully removed'), status: null }), setTimeout(function () { M(null) }, 5e3) }).catch(function (n) { console.error(n), M({ message: 'User '.concat(e, ' can\xb4t removed'), status: 'error' }), setTimeout(function () { M(null) }, 5e3) }) }; return Object(b.jsxs)('div', { className: 'App', children: [Object(b.jsx)('h2', { children: 'Phonebook' }), Object(b.jsx)(p, { message: E }), Object(b.jsx)(f, { handleOnChage: function (e) { return N(e.target.value) } }), Object(b.jsx)('h2', { children: 'Add a new Person' }), Object(b.jsx)(m, { handleOnChageName: function (e) { return g(e.target.value) }, handleOnChageNumber: function (e) { return C(e.target.value) }, handleSubmit: function (e) { e.preventDefault(); const n = Math.max.apply(Math, Object(o.a)(t.map(function (e) { return e.id }))); const c = { name: l, number: w, id: n + 1 }; if (t.some(function (e) { return e.name === c.name })) { const r = window.confirm(''.concat(c.name, ' is already added to phonebook, replace the old number with a new one')); const u = t.find(function (e) { if (e.name === c.name) return e.id }); r && ((function (e, n) { return d.a.put(''.concat(h).concat(e), n) }(u.id, Object(s.a)(Object(s.a)({}, c), {}, { id: u.id }))).then(function (e) { e.status === 200 && M({ message: 'User '.concat(u.name, ' has been updated successfully'), status: null }), setTimeout(function () { M(null) }, 5e3) }).catch(function (e) { console.error(e), M({ message: " can't update user", status: 'error' }), setTimeout(function () { M(null) }, 5e3) }), j().then(function (e) { return a(e.data) })) } else { const i = Object(o.a)(t); a(i.concat(c)), (function (e) { return d.a.post(h, e) }(c)).then(function (e) { e.status === 200 && M({ message: 'the user  was added correctly', status: null }), setTimeout(function () { M(null) }, 5e3) }).catch(function (e) { console.error(e), M({ message: " can't add user", status: 'error' }), setTimeout(function () { M(null) }, 5e3) }) } } }), Object(b.jsx)('h2', { children: 'Numbers' }), y === '' ? t.map(function (e) { return Object(b.jsx)(O, { person: e, handleDelete: U }, e.id) }) : (function (e, n) { return e.filter(function (e) { return new RegExp(n, 'i').test(e.name) }) }(t, y)).map(function (e) { return Object(b.jsx)(O, { person: e, handleDelete: U }, e.id) })] }) }; u.a.render(Object(b.jsx)(a.a.StrictMode, { children: Object(b.jsx)(g, {}) }), document.getElementById('root')) } }, [[44, 1, 2]]])
// # sourceMappingURL=main.3b220060.chunk.js.map
